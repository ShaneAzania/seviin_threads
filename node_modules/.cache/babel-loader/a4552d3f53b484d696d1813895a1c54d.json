{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, createUserWithEmailAndPassword, GoogleAuthProvider, onAuthStateChanged, signInWithPopup, signInWithEmailAndPassword,\n// signInWithRedirect,\nsignOut } from \"firebase/auth\";\nimport { getFirestore, doc, getDoc, setDoc, collection, writeBatch, query } from \"firebase/firestore\";\n\n// const { } = useContext(UserContext);\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCSsn358KsZjPqT6A0WCf4U-AkDy4v4q4c\",\n  authDomain: \"crown-clothing-db-4898f.firebaseapp.com\",\n  projectId: \"crown-clothing-db-4898f\",\n  storageBucket: \"crown-clothing-db-4898f.appspot.com\",\n  messagingSenderId: \"453083291674\",\n  appId: \"1:453083291674:web:513447b479833089a071a3\"\n};\n// Initialize Firebase\nexport const firebaseApp = initializeApp(firebaseConfig);\n\n// PROVIDER(S)\n// create Google Auth Provider for Google account sign-ins\nconst provider_Google = new GoogleAuthProvider();\nprovider_Google.setCustomParameters({\n  prompt: \"select_account\"\n});\n\n// Authentication\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider_Google);\n// export const signInWithGoogleRedirect = () => signInWithRedirect(auth, provider_Google); // redirect not sending data to firebase Auth in Firebase Console\n\n// create Database object\nexport const db = getFirestore();\n\n//  creating collections\nexport const addCollectionDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = collection(db, collectionKey),\n    batch = writeBatch(db);\n  objectsToAdd.forEach(object => {\n    const docRef = doc(collectionRef, object.title.toLowerCase());\n    batch.set(docRef, object);\n  });\n  await batch.commit();\n};\n// retrieving collections\nexport const getCategoriesAndDocuments = async collectionKey => {\n  const collectionRef = collection(db, collectionKey.toLowerCase());\n  const q = query(collectionRef);\n  const querySnapshot = await getDoc(q);\n  console.log(\"getCategoriesAndDocuments(): \".toUpperCase(), querySnapshot);\n  const categoryArray = querySnapshot.docs.map(docSnapshot => docSnapshot.data());\n  return categoryArray;\n};\n\n// Create user in firestore database and return signed in credentials from userDocRef\nexport const createUserDocRefFromAuth = async userAuth => {\n  if (!userAuth) return;\n  // console.log(\"userAuth:\", userAuth);\n\n  // create a user object with data from the provider\n  const userDocRef = doc(db, \"users\", userAuth.uid); // (database, 'collection string', aUniqueID/recordKey)\n  // console.log(\"userDocRef:\", userDocRef);\n\n  //getDoc(userDocRef) checks the firestore database for the existence of this userDocRef\n  const userSnapShot = await getDoc(userDocRef);\n  // console.log(\"userSnapShot:\", userSnapShot);\n  // console.log(\"userSnapShot exists:\", userSnapShot.exists());\n\n  // if user does not already exist then create the user document\n  if (!userSnapShot.exists()) {\n    const {\n        displayName,\n        email\n      } = userAuth,\n      createdAt = new Date(),\n      updatedAt = new Date();\n\n    //create user using setDoc\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        updatedAt,\n        createdAt\n      });\n    } catch (error) {\n      console.log(\"Error creating the user:\", error.message);\n    }\n  }\n  return userDocRef;\n};\n\n// use this function in an onClick of a signIn button\nexport const logGoogleUsersWithPopUp = async () => {\n  const {\n    user\n  } = await signInWithGooglePopup();\n  const userAuth = user;\n  // console.log(\"firebase.utils: logGoogleUsersWithPopUp: userAuth\", userAuth);\n  await createUserDocRefFromAuth(userAuth);\n  return userAuth;\n};\n\n// Create user With email and password\nexport const createAuthUserWithEmailAndPassword = async (email, password, displayName) => {\n  if (!email || !password) return;\n  try {\n    const {\n      user\n    } = await createUserWithEmailAndPassword(auth, email, password);\n    const userAuth = {\n      ...user,\n      displayName: displayName\n    };\n    // console.log(\"createAuthUserWithEmailAndPassword userAuth: \", userAuth);\n\n    await createUserDocRefFromAuth(userAuth);\n    return userAuth;\n  } catch (error) {\n    if (error.code === \"auth/email-already-in-use\") {\n      alert(\"Email already registered to a current user. Use a differnt email address.\");\n    }\n    console.log(\"There was an error trying to create this user with email and password:\", error);\n  }\n};\n\n// sign in with email and password\nexport const signInUsingEmailAndPassword = async (email, password) => {\n  if (!email || !password) {\n    alert(\"Missing email and/or password.\");\n    return;\n  }\n  try {\n    const {\n      user\n    } = await signInWithEmailAndPassword(auth, email, password);\n    var userAuth = user;\n    userAuth = await getUserDisplayNameFromeFireStore(userAuth);\n\n    // console.log(\"signInUsingEmailAndPassword: userAuth:\", userAuth);\n    return userAuth;\n  } catch (error) {\n    switch (error.code) {\n      case \"auth/user-not-found\":\n        alert(\"User not found.\");\n        break;\n      case \"auth/wrong-password\":\n        alert(\"Incorrect password.\");\n        break;\n      default:\n        console.log(\"There was an error trying to create this user with email and password:\", error);\n    }\n  }\n};\nexport const getUserDisplayNameFromeFireStore = async userAuth => {\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n  var userSnapShot = await getDoc(userDocRef);\n  var displayName;\n  // console.log(\"firebase.utils: getUserDisplayNameFromeFireStore: userSnapShot.data() 1:\", userSnapShot.data());\n\n  //if displayName is null, set time out to give firestore some time to finish storing data\n  if (!userSnapShot.exists()) {\n    setTimeout(async () => {\n      userSnapShot = await getDoc(userDocRef);\n      displayName = await userSnapShot.data().displayName;\n      console.log(\"firebase.utils: getUserDisplayNameFromeFireStore: userSnapShot.data() 2:\", userSnapShot.data());\n    }, 5000);\n  } else displayName = await userSnapShot.data().displayName;\n  return userAuth = {\n    ...userAuth,\n    displayName\n  };\n};\n\n// sign out user\nexport const signOutUser = async () => await signOut(auth);\n\n// auth state change listener\nexport const onAuthStateChangedListener = callBack => {\n  if (!callBack) return;\n  return onAuthStateChanged(auth, callBack);\n};","map":{"version":3,"names":["initializeApp","getAuth","createUserWithEmailAndPassword","GoogleAuthProvider","onAuthStateChanged","signInWithPopup","signInWithEmailAndPassword","signOut","getFirestore","doc","getDoc","setDoc","collection","writeBatch","query","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","provider_Google","setCustomParameters","prompt","auth","signInWithGooglePopup","db","addCollectionDocuments","collectionKey","objectsToAdd","collectionRef","batch","forEach","object","docRef","title","toLowerCase","set","commit","getCategoriesAndDocuments","q","querySnapshot","console","log","toUpperCase","categoryArray","docs","map","docSnapshot","data","createUserDocRefFromAuth","userAuth","userDocRef","uid","userSnapShot","exists","displayName","email","createdAt","Date","updatedAt","error","message","logGoogleUsersWithPopUp","user","createAuthUserWithEmailAndPassword","password","code","alert","signInUsingEmailAndPassword","getUserDisplayNameFromeFireStore","setTimeout","signOutUser","onAuthStateChangedListener","callBack"],"sources":["/Users/shaneazania/Documents/GitHub/React-Projects/crown-clothing/src/utils/firebase/firebase.utils.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport {\n\tgetAuth,\n\tcreateUserWithEmailAndPassword,\n\tGoogleAuthProvider,\n\tonAuthStateChanged,\n\tsignInWithPopup,\n\tsignInWithEmailAndPassword,\n\t// signInWithRedirect,\n\tsignOut,\n} from \"firebase/auth\";\nimport { getFirestore, doc, getDoc, setDoc, collection, writeBatch, query } from \"firebase/firestore\";\n\n// const { } = useContext(UserContext);\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n\tapiKey: \"AIzaSyCSsn358KsZjPqT6A0WCf4U-AkDy4v4q4c\",\n\tauthDomain: \"crown-clothing-db-4898f.firebaseapp.com\",\n\tprojectId: \"crown-clothing-db-4898f\",\n\tstorageBucket: \"crown-clothing-db-4898f.appspot.com\",\n\tmessagingSenderId: \"453083291674\",\n\tappId: \"1:453083291674:web:513447b479833089a071a3\",\n};\n// Initialize Firebase\nexport const firebaseApp = initializeApp(firebaseConfig);\n\n// PROVIDER(S)\n// create Google Auth Provider for Google account sign-ins\nconst provider_Google = new GoogleAuthProvider();\nprovider_Google.setCustomParameters({\n\tprompt: \"select_account\",\n});\n\n// Authentication\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider_Google);\n// export const signInWithGoogleRedirect = () => signInWithRedirect(auth, provider_Google); // redirect not sending data to firebase Auth in Firebase Console\n\n// create Database object\nexport const db = getFirestore();\n\n//  creating collections\nexport const addCollectionDocuments = async (collectionKey, objectsToAdd) => {\n\tconst collectionRef = collection(db, collectionKey),\n\t\tbatch = writeBatch(db);\n\tobjectsToAdd.forEach((object) => {\n\t\tconst docRef = doc(collectionRef, object.title.toLowerCase());\n\n\t\tbatch.set(docRef, object);\n\t});\n\n\tawait batch.commit();\n};\n// retrieving collections\nexport const getCategoriesAndDocuments = async (collectionKey) => {\n\tconst collectionRef = collection(db, collectionKey.toLowerCase());\n\tconst q = query(collectionRef);\n\n\tconst querySnapshot = await getDoc(q);\n\tconsole.log(\"getCategoriesAndDocuments(): \".toUpperCase(), querySnapshot);\n\tconst categoryArray = querySnapshot.docs.map((docSnapshot) => docSnapshot.data());\n\n\treturn categoryArray;\n};\n\n// Create user in firestore database and return signed in credentials from userDocRef\nexport const createUserDocRefFromAuth = async (userAuth) => {\n\tif (!userAuth) return;\n\t// console.log(\"userAuth:\", userAuth);\n\n\t// create a user object with data from the provider\n\tconst userDocRef = doc(db, \"users\", userAuth.uid); // (database, 'collection string', aUniqueID/recordKey)\n\t// console.log(\"userDocRef:\", userDocRef);\n\n\t//getDoc(userDocRef) checks the firestore database for the existence of this userDocRef\n\tconst userSnapShot = await getDoc(userDocRef);\n\t// console.log(\"userSnapShot:\", userSnapShot);\n\t// console.log(\"userSnapShot exists:\", userSnapShot.exists());\n\n\t// if user does not already exist then create the user document\n\tif (!userSnapShot.exists()) {\n\t\tconst { displayName, email } = userAuth,\n\t\t\tcreatedAt = new Date(),\n\t\t\tupdatedAt = new Date();\n\n\t\t//create user using setDoc\n\t\ttry {\n\t\t\tawait setDoc(userDocRef, { displayName, email, updatedAt, createdAt });\n\t\t} catch (error) {\n\t\t\tconsole.log(\"Error creating the user:\", error.message);\n\t\t}\n\t}\n\n\treturn userDocRef;\n};\n\n// use this function in an onClick of a signIn button\nexport const logGoogleUsersWithPopUp = async () => {\n\tconst { user } = await signInWithGooglePopup();\n\tconst userAuth = user;\n\t// console.log(\"firebase.utils: logGoogleUsersWithPopUp: userAuth\", userAuth);\n\tawait createUserDocRefFromAuth(userAuth);\n\treturn userAuth;\n};\n\n// Create user With email and password\nexport const createAuthUserWithEmailAndPassword = async (email, password, displayName) => {\n\tif (!email || !password) return;\n\n\ttry {\n\t\tconst { user } = await createUserWithEmailAndPassword(auth, email, password);\n\t\tconst userAuth = { ...user, displayName: displayName };\n\t\t// console.log(\"createAuthUserWithEmailAndPassword userAuth: \", userAuth);\n\n\t\tawait createUserDocRefFromAuth(userAuth);\n\t\treturn userAuth;\n\t} catch (error) {\n\t\tif (error.code === \"auth/email-already-in-use\") {\n\t\t\talert(\"Email already registered to a current user. Use a differnt email address.\");\n\t\t}\n\t\tconsole.log(\"There was an error trying to create this user with email and password:\", error);\n\t}\n};\n\n// sign in with email and password\nexport const signInUsingEmailAndPassword = async (email, password) => {\n\tif (!email || !password) {\n\t\talert(\"Missing email and/or password.\");\n\t\treturn;\n\t}\n\n\ttry {\n\t\tconst { user } = await signInWithEmailAndPassword(auth, email, password);\n\t\tvar userAuth = user;\n\n\t\tuserAuth = await getUserDisplayNameFromeFireStore(userAuth);\n\n\t\t// console.log(\"signInUsingEmailAndPassword: userAuth:\", userAuth);\n\t\treturn userAuth;\n\t} catch (error) {\n\t\tswitch (error.code) {\n\t\t\tcase \"auth/user-not-found\":\n\t\t\t\talert(\"User not found.\");\n\t\t\t\tbreak;\n\t\t\tcase \"auth/wrong-password\":\n\t\t\t\talert(\"Incorrect password.\");\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.log(\"There was an error trying to create this user with email and password:\", error);\n\t\t}\n\t}\n};\nexport const getUserDisplayNameFromeFireStore = async (userAuth) => {\n\tconst userDocRef = doc(db, \"users\", userAuth.uid);\n\tvar userSnapShot = await getDoc(userDocRef);\n\tvar displayName;\n\t// console.log(\"firebase.utils: getUserDisplayNameFromeFireStore: userSnapShot.data() 1:\", userSnapShot.data());\n\n\t//if displayName is null, set time out to give firestore some time to finish storing data\n\tif (!userSnapShot.exists()) {\n\t\tsetTimeout(async () => {\n\t\t\tuserSnapShot = await getDoc(userDocRef);\n\t\t\tdisplayName = await userSnapShot.data().displayName;\n\t\t\tconsole.log(\n\t\t\t\t\"firebase.utils: getUserDisplayNameFromeFireStore: userSnapShot.data() 2:\",\n\t\t\t\tuserSnapShot.data()\n\t\t\t);\n\t\t}, 5000);\n\t} else displayName = await userSnapShot.data().displayName;\n\n\treturn (userAuth = { ...userAuth, displayName });\n};\n\n// sign out user\nexport const signOutUser = async () => await signOut(auth);\n\n// auth state change listener\nexport const onAuthStateChangedListener = (callBack) => {\n\tif (!callBack) return;\n\n\treturn onAuthStateChanged(auth, callBack);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}