{"ast":null,"code":"var _jsxFileName = \"/Users/shaneazania/Documents/GitHub/React-Projects/crown-clothing/src/contexts/cart.context.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect } from \"react\";\nimport \"../utils/firebase/firebase.utils\";\n\n// the actual value you want to access\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext({\n  isCartOpen: false,\n  set_isCartOpen: () => null,\n  cartItems: null,\n  addItemToCart: () => null,\n  subtractItemFromCart: () => null,\n  deleteFromCart: () => null,\n  cartCount: null\n});\n\n// provider is the actual component that gets wrapped around other components to give them acces to the context\nexport const CartProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [isCartOpen, set_isCartOpen] = useState(false);\n  const [cartItems, set_cartItems] = useState([]);\n  const [cartCount, set_cartCount] = useState(0);\n  useEffect(() => {\n    var countAccumulator = 0;\n    cartItems.map(item => {\n      countAccumulator += item.count;\n    });\n  }, [cartItems]);\n  const addItemToCart = itemToAdd => {\n    // If item is already in 'cartItems', increase the quantity value, else add 'itemToAdd'.\n    var updatedCartItemsArray = [];\n    // check if itemToAdd has a valid id in the cartItems[] already\n    const itemToAddPresent = cartItems.find(item => item.id === itemToAdd.id);\n\n    // if item is already present, increase it's quantity by 1\n    if (itemToAddPresent) {\n      updatedCartItemsArray = cartItems.map(item => item.id === itemToAdd.id ?\n      //if itemToAdd matches current item in cart, increase the existing item quantity by 1\n      {\n        ...item,\n        quantity: item.quantity + 1\n      } :\n      //if current item does not match, just add current item to the new cart array\n      item);\n    } // if item is NOT already present, add quantity value to item, then add item to updatedCartItemsArray\n    else {\n      updatedCartItemsArray = [...cartItems, {\n        ...itemToAdd,\n        quantity: 1\n      }];\n    }\n    set_cartItems(updatedCartItemsArray);\n  };\n  const subtractItemFromCart = itemToSubtract => {\n    var updatedCartItemsArray = [];\n\n    // check if item is in cartItems\n    const itemToSubtractPresent = cartItems.find(item => item.id === itemToSubtract.id);\n\n    // if item present, decrease quantity, else don't do anything\n    if (itemToSubtractPresent) {\n      updatedCartItemsArray = cartItems.map(item => {\n        if (item.id === itemToSubtractPresent.id) {\n          // check quantity\n          return {\n            ...item,\n            quantity: item.quantity - 1\n          };\n        } else {\n          return item;\n        }\n      });\n      // check if quantity reaches 0, don't add to updated cart array)\n      updatedCartItemsArray = updatedCartItemsArray.filter(item => item.quantity > 0);\n      set_cartItems(updatedCartItemsArray);\n    }\n  };\n  const deleteFromCart = itemToDelete => {\n    const updatedCartItemsArray = cartItems.filter(item => item.id !== itemToDelete.id);\n    set_cartItems(updatedCartItemsArray);\n  };\n  const carCount = () => cartItems.length;\n  const value = {\n    isCartOpen,\n    set_isCartOpen,\n    cartItems,\n    addItemToCart,\n    subtractItemFromCart,\n    deleteFromCart\n  };\n\n  // useEffect(() => {\n  // \t// const unsubscribe = onAuthStateChangedListener(async (products) => {\n  // \t// });\n  // \t// return unsubscribe;\n  // }, []);\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n};\n_s(CartProvider, \"JYV3LPJjuE2zRKPpbv7eE3jKdd0=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","CartContext","isCartOpen","set_isCartOpen","cartItems","addItemToCart","subtractItemFromCart","deleteFromCart","cartCount","CartProvider","children","set_cartItems","set_cartCount","countAccumulator","map","item","count","itemToAdd","updatedCartItemsArray","itemToAddPresent","find","id","quantity","itemToSubtract","itemToSubtractPresent","filter","itemToDelete","carCount","length","value"],"sources":["/Users/shaneazania/Documents/GitHub/React-Projects/crown-clothing/src/contexts/cart.context.jsx"],"sourcesContent":["import { createContext, useState, useEffect } from \"react\";\nimport {} from \"../utils/firebase/firebase.utils\";\n\n// the actual value you want to access\nexport const CartContext = createContext({\n\tisCartOpen: false,\n\tset_isCartOpen: () => null,\n\tcartItems: null,\n\taddItemToCart: () => null,\n\tsubtractItemFromCart: () => null,\n\tdeleteFromCart: () => null,\n\tcartCount: null,\n});\n\n// provider is the actual component that gets wrapped around other components to give them acces to the context\nexport const CartProvider = ({ children }) => {\n\tconst [isCartOpen, set_isCartOpen] = useState(false);\n\tconst [cartItems, set_cartItems] = useState([]);\n\tconst [cartCount, set_cartCount] = useState(0);\n\t\n\tuseEffect(() => {\n\t\tvar countAccumulator = 0;\n\t\tcartItems.map((item) => {\n\t\t\tcountAccumulator += item.count;\n\t\t});\n\n\t\t\n\t}, [cartItems]);\n\n\tconst addItemToCart = (itemToAdd) => {\n\t\t// If item is already in 'cartItems', increase the quantity value, else add 'itemToAdd'.\n\t\tvar updatedCartItemsArray = [];\n\t\t// check if itemToAdd has a valid id in the cartItems[] already\n\t\tconst itemToAddPresent = cartItems.find((item) => item.id === itemToAdd.id);\n\n\t\t// if item is already present, increase it's quantity by 1\n\t\tif (itemToAddPresent) {\n\t\t\tupdatedCartItemsArray = cartItems.map((item) =>\n\t\t\t\titem.id === itemToAdd.id\n\t\t\t\t\t? //if itemToAdd matches current item in cart, increase the existing item quantity by 1\n\t\t\t\t\t  { ...item, quantity: item.quantity + 1 }\n\t\t\t\t\t: //if current item does not match, just add current item to the new cart array\n\t\t\t\t\t  item\n\t\t\t);\n\t\t} // if item is NOT already present, add quantity value to item, then add item to updatedCartItemsArray\n\t\telse {\n\t\t\tupdatedCartItemsArray = [...cartItems, { ...itemToAdd, quantity: 1 }];\n\t\t}\n\n\t\tset_cartItems(updatedCartItemsArray);\n\t};\n\n\tconst subtractItemFromCart = (itemToSubtract) => {\n\t\tvar updatedCartItemsArray = [];\n\n\t\t// check if item is in cartItems\n\t\tconst itemToSubtractPresent = cartItems.find((item) => item.id === itemToSubtract.id);\n\n\t\t// if item present, decrease quantity, else don't do anything\n\t\tif (itemToSubtractPresent) {\n\t\t\tupdatedCartItemsArray = cartItems.map((item) => {\n\t\t\t\tif (item.id === itemToSubtractPresent.id) {\n\t\t\t\t\t// check quantity\n\t\t\t\t\treturn { ...item, quantity: item.quantity - 1 };\n\t\t\t\t} else {\n\t\t\t\t\treturn item;\n\t\t\t\t}\n\t\t\t});\n\t\t\t// check if quantity reaches 0, don't add to updated cart array)\n\t\t\tupdatedCartItemsArray = updatedCartItemsArray.filter((item) => item.quantity > 0);\n\n\t\t\tset_cartItems(updatedCartItemsArray);\n\t\t}\n\t};\n\n\tconst deleteFromCart = (itemToDelete) => {\n\t\tconst updatedCartItemsArray = cartItems.filter((item) => item.id !== itemToDelete.id);\n\t\tset_cartItems(updatedCartItemsArray);\n\t};\n\n\tconst carCount = () => cartItems.length;\n\n\tconst value = { isCartOpen, set_isCartOpen, cartItems, addItemToCart, subtractItemFromCart, deleteFromCart };\n\n\t// useEffect(() => {\n\t// \t// const unsubscribe = onAuthStateChangedListener(async (products) => {\n\t// \t// });\n\t// \t// return unsubscribe;\n\t// }, []);\n\n\treturn <CartContext.Provider value={value}>{children}</CartContext.Provider>;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}