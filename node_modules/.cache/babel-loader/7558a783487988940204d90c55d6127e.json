{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword, signInWithEmailAndPassword } from \"firebase/auth\";\nimport { getFirestore, doc, getDoc, setDoc } from \"firebase/firestore\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCSsn358KsZjPqT6A0WCf4U-AkDy4v4q4c\",\n  authDomain: \"crown-clothing-db-4898f.firebaseapp.com\",\n  projectId: \"crown-clothing-db-4898f\",\n  storageBucket: \"crown-clothing-db-4898f.appspot.com\",\n  messagingSenderId: \"453083291674\",\n  appId: \"1:453083291674:web:513447b479833089a071a3\"\n};\n\n// Initialize Firebase\nexport const firebaseApp = initializeApp(firebaseConfig);\n\n// PROVIDER(S)\n// create Google Auth Provider for Google account sign-ins\nconst provider_Google = new GoogleAuthProvider();\nprovider_Google.setCustomParameters({\n  prompt: \"select_account\"\n});\n\n// Authentication\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider_Google);\n// export const signInWithGoogleRedirect = () => signInWithRedirect(auth, provider_Google); // redirect not sending data to firebase Auth in Firebase Console\n\n// create Database object\nexport const db = getFirestore();\n// Create user in firestore database and return signed in credentials from userDocRef\nexport const createUserDocRefFromAuth = async userAuth => {\n  if (!userAuth) return;\n  // console.log(\"userAuth:\", userAuth);\n\n  // create a user object with data from the provider\n  const userDocRef = doc(db, \"users\", userAuth.uid); // (database, 'collection string', aUniqueID/recordKey)\n  // console.log(\"userDocRef:\", userDocRef);\n\n  //getDoc(userDocRef) checks the firestore database for the existence of this userDocRef\n  const userSnapShot = await getDoc(userDocRef);\n  // console.log(\"userSnapShot:\", userSnapShot);\n  // console.log(\"userSnapShot exists:\", userSnapShot.exists());\n\n  // if user does not already exist then create the user document\n  if (!userSnapShot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n    const updatedAt = new Date();\n\n    //create user using setDoc\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        updatedAt,\n        createdAt\n      });\n    } catch (error) {\n      console.log(\"Error creating the user:\", error.message);\n    }\n  }\n  return userDocRef;\n};\n\n// use these function in an onClick of a signIn button\nexport const logGoogleUsersWithPopUp = async () => {\n  const {\n    user\n  } = await signInWithGooglePopup();\n  const userAuth = user;\n  console.log(userAuth);\n  return await createUserDocRefFromAuth(userAuth);\n};\n\n// Create user With email and password\nexport const createAuthUserWithEmailAndPassword = async (email, password, displayName) => {\n  if (!email || !password) return;\n  try {\n    const {\n      user\n    } = await createUserWithEmailAndPassword(auth, email, password);\n    const userAuth = {\n      ...user,\n      displayName: displayName\n    };\n    await createUserDocRefFromAuth(userAuth);\n    return userAuth;\n  } catch (error) {\n    if (error.code === \"auth/email-already-in-use\") {\n      alert(\"Email already registered to a current user. Use a differnt email address.\");\n    }\n    console.log(\"There was an error trying to create this user with email and password:\", error);\n  }\n};\n\n// sign in with email and password\nexport const signInUsingEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  try {\n    return await signInWithEmailAndPassword(auth, email, password);\n  } catch (error) {\n    switch (error.code) {\n      case \"auth/user-not-found\":\n        alert(\"User not found.\");\n        break;\n      case \"auth/wrong-password\":\n    }\n    if (error.code === \"auth/wrong-password\") {}\n    console.log(\"There was an error trying to create this user with email and password:\", error);\n  }\n};","map":{"version":3,"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","signInWithEmailAndPassword","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","provider_Google","setCustomParameters","prompt","auth","signInWithGooglePopup","db","createUserDocRefFromAuth","userAuth","userDocRef","uid","userSnapShot","exists","displayName","email","createdAt","Date","updatedAt","error","console","log","message","logGoogleUsersWithPopUp","user","createAuthUserWithEmailAndPassword","password","code","alert","signInUsingEmailAndPassword"],"sources":["/Users/shaneazania/Documents/GitHub/React-Projects/crown-clothing/src/utils/firebase/firebase.utils.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport {\n\tgetAuth,\n\tsignInWithRedirect,\n\tsignInWithPopup,\n\tGoogleAuthProvider,\n\tcreateUserWithEmailAndPassword,\n\tsignInWithEmailAndPassword,\n} from \"firebase/auth\";\nimport { getFirestore, doc, getDoc, setDoc } from \"firebase/firestore\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n\tapiKey: \"AIzaSyCSsn358KsZjPqT6A0WCf4U-AkDy4v4q4c\",\n\tauthDomain: \"crown-clothing-db-4898f.firebaseapp.com\",\n\tprojectId: \"crown-clothing-db-4898f\",\n\tstorageBucket: \"crown-clothing-db-4898f.appspot.com\",\n\tmessagingSenderId: \"453083291674\",\n\tappId: \"1:453083291674:web:513447b479833089a071a3\",\n};\n\n// Initialize Firebase\nexport const firebaseApp = initializeApp(firebaseConfig);\n\n// PROVIDER(S)\n// create Google Auth Provider for Google account sign-ins\nconst provider_Google = new GoogleAuthProvider();\nprovider_Google.setCustomParameters({\n\tprompt: \"select_account\",\n});\n\n// Authentication\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider_Google);\n// export const signInWithGoogleRedirect = () => signInWithRedirect(auth, provider_Google); // redirect not sending data to firebase Auth in Firebase Console\n\n// create Database object\nexport const db = getFirestore();\n// Create user in firestore database and return signed in credentials from userDocRef\nexport const createUserDocRefFromAuth = async (userAuth) => {\n\tif (!userAuth) return;\n\t// console.log(\"userAuth:\", userAuth);\n\n\t// create a user object with data from the provider\n\tconst userDocRef = doc(db, \"users\", userAuth.uid); // (database, 'collection string', aUniqueID/recordKey)\n\t// console.log(\"userDocRef:\", userDocRef);\n\n\t//getDoc(userDocRef) checks the firestore database for the existence of this userDocRef\n\tconst userSnapShot = await getDoc(userDocRef);\n\t// console.log(\"userSnapShot:\", userSnapShot);\n\t// console.log(\"userSnapShot exists:\", userSnapShot.exists());\n\n\t// if user does not already exist then create the user document\n\tif (!userSnapShot.exists()) {\n\t\tconst { displayName, email } = userAuth;\n\t\tconst createdAt = new Date();\n\t\tconst updatedAt = new Date();\n\n\t\t//create user using setDoc\n\t\ttry {\n\t\t\tawait setDoc(userDocRef, { displayName, email, updatedAt, createdAt });\n\t\t} catch (error) {\n\t\t\tconsole.log(\"Error creating the user:\", error.message);\n\t\t}\n\t}\n\n\treturn userDocRef;\n};\n\n// use these function in an onClick of a signIn button\nexport const logGoogleUsersWithPopUp = async () => {\n\tconst { user } = await signInWithGooglePopup();\n\tconst userAuth = user;\n\tconsole.log(userAuth);\n\treturn await createUserDocRefFromAuth(userAuth);\n};\n\n// Create user With email and password\nexport const createAuthUserWithEmailAndPassword = async (email, password, displayName) => {\n\tif (!email || !password) return;\n\n\ttry {\n\t\tconst { user } = await createUserWithEmailAndPassword(auth, email, password);\n\t\tconst userAuth = { ...user, displayName: displayName };\n\n\t\tawait createUserDocRefFromAuth(userAuth);\n\t\treturn userAuth;\n\t} catch (error) {\n\t\tif (error.code === \"auth/email-already-in-use\") {\n\t\t\talert(\"Email already registered to a current user. Use a differnt email address.\");\n\t\t}\n\t\tconsole.log(\"There was an error trying to create this user with email and password:\", error);\n\t}\n};\n\n// sign in with email and password\nexport const signInUsingEmailAndPassword = async (email, password) => {\n\tif (!email || !password) return;\n\n\ttry {\n\t\treturn await signInWithEmailAndPassword(auth, email, password);\n\t} catch (error) {\n\t\tswitch (error.code) {\n            case \"auth/user-not-found\":\n                alert(\"User not found.\");\n                break\n            case \"auth/wrong-password\":\n\t\t}\n\n\t\tif (error.code === \"auth/wrong-password\") {\n\t\t\t\n\t\t}\n\n\t\tconsole.log(\"There was an error trying to create this user with email and password:\", error);\n\t}\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}