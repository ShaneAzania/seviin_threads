{"ast":null,"code":"var _jsxFileName = \"/Users/shaneazania/Documents/GitHub/React-Projects/crown-clothing/src/contexts/cart.context.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState /*, useEffect*/ } from \"react\";\nimport \"../utils/firebase/firebase.utils\";\n\n// the actual value you want to access\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext({\n  isCartOpen: false,\n  set_isCartOpen: () => null,\n  cartItems: [],\n  addItemToCart: () => {}\n});\n\n// provider is the actual component that gets wrapped around other components to give them acces to the context\nexport const CartProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [isCartOpen, set_isCartOpen] = useState(true);\n  const [cartItems, set_cartItems] = useState(null);\n  // cart item structure\n  /*\n  \t{\n  \t\tid: 1,\n  \t\tname: \"Brown Brim\",\n  \t\timageUrl: \"https://i.ibb.co/ZYW3VTp/brown-brim.png\",\n  \t\tprice: 25,\n  \t\tquantity: 10,\n  \t}\n  */\n\n  const addItemToCart = itemToAdd => {\n    // If item is already in 'cartItems', increase the quantity value, else add 'itemToAdd'.\n    const updatedCartItemsArray = cartItems.map(item => {\n      if (item.id === itemToAdd.id) {\n        //if itemToAdd matches current item in cart, increase the existing item quantity by 1\n        return {\n          ...itemToAdd,\n          quantity: itemToAdd.quantity + 1\n        };\n      } else {\n        //if current item does not match, just add current item to the new cart array\n        return item;\n      }\n    });\n    set_cartItems(updatedCartItemsArray);\n  };\n  const value = {\n    isCartOpen,\n    set_isCartOpen,\n    cartItems,\n    set_cartItems,\n    addItemToCart\n  };\n\n  // useEffect(() => {\n  // \t// const unsubscribe = onAuthStateChangedListener(async (products) => {\n  // \t// });\n  // \t// return unsubscribe;\n  // }, []);\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n_s(CartProvider, \"dBzWxBj7wWI9XcDW34yE5EBbTFo=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["createContext","useState","CartContext","isCartOpen","set_isCartOpen","cartItems","addItemToCart","CartProvider","children","set_cartItems","itemToAdd","updatedCartItemsArray","map","item","id","quantity","value"],"sources":["/Users/shaneazania/Documents/GitHub/React-Projects/crown-clothing/src/contexts/cart.context.jsx"],"sourcesContent":["import { createContext, useState /*, useEffect*/ } from \"react\";\nimport {} from \"../utils/firebase/firebase.utils\";\n\n// the actual value you want to access\nexport const CartContext = createContext({\n\tisCartOpen: false,\n\tset_isCartOpen: () => null,\n\tcartItems: [],\n\taddItemToCart: () => {},\n});\n\n// provider is the actual component that gets wrapped around other components to give them acces to the context\nexport const CartProvider = ({ children }) => {\n\tconst [isCartOpen, set_isCartOpen] = useState(true);\n\tconst [cartItems, set_cartItems] = useState(null);\n\t// cart item structure\n\t/*\n\t\t{\n\t\t\tid: 1,\n\t\t\tname: \"Brown Brim\",\n\t\t\timageUrl: \"https://i.ibb.co/ZYW3VTp/brown-brim.png\",\n\t\t\tprice: 25,\n\t\t\tquantity: 10,\n\t\t}\n\t*/\n\n\tconst addItemToCart = (itemToAdd) => {\n\t\t// If item is already in 'cartItems', increase the quantity value, else add 'itemToAdd'.\n\t\tconst updatedCartItemsArray = cartItems.map((item) => {\n\t\t\tif (item.id === itemToAdd.id) {\n\t\t\t\t//if itemToAdd matches current item in cart, increase the existing item quantity by 1\n\t\t\t\treturn { ...itemToAdd, quantity: itemToAdd.quantity + 1 };\n\t\t\t} else {\n\t\t\t\t//if current item does not match, just add current item to the new cart array\n\t\t\t\treturn item;\n\t\t\t}\n\t\t});\n\n\t\tset_cartItems(updatedCartItemsArray);\n\t};\n\n\tconst value = { isCartOpen, set_isCartOpen, cartItems, set_cartItems, addItemToCart };\n\n\t// useEffect(() => {\n\t// \t// const unsubscribe = onAuthStateChangedListener(async (products) => {\n\t// \t// });\n\t// \t// return unsubscribe;\n\t// }, []);\n\n\treturn <CartContext.Provider value={value}>{children}</CartContext.Provider>;\n};\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,CAAC,uBAAuB,OAAO;AAC/D,OAAe,kCAAkC;;AAEjD;AAAA;AACA,OAAO,MAAMC,WAAW,gBAAGF,aAAa,CAAC;EACxCG,UAAU,EAAE,KAAK;EACjBC,cAAc,EAAE,MAAM,IAAI;EAC1BC,SAAS,EAAE,EAAE;EACbC,aAAa,EAAE,MAAM,CAAC;AACvB,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,YAAY,GAAG,QAAkB;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EACxC,MAAM,CAACL,UAAU,EAAEC,cAAc,CAAC,GAAGH,QAAQ,CAAC,IAAI,CAAC;EACnD,MAAM,CAACI,SAAS,EAAEI,aAAa,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACjD;EACA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEC,MAAMK,aAAa,GAAII,SAAS,IAAK;IACpC;IACA,MAAMC,qBAAqB,GAAGN,SAAS,CAACO,GAAG,CAAEC,IAAI,IAAK;MACrD,IAAIA,IAAI,CAACC,EAAE,KAAKJ,SAAS,CAACI,EAAE,EAAE;QAC7B;QACA,OAAO;UAAE,GAAGJ,SAAS;UAAEK,QAAQ,EAAEL,SAAS,CAACK,QAAQ,GAAG;QAAE,CAAC;MAC1D,CAAC,MAAM;QACN;QACA,OAAOF,IAAI;MACZ;IACD,CAAC,CAAC;IAEFJ,aAAa,CAACE,qBAAqB,CAAC;EACrC,CAAC;EAED,MAAMK,KAAK,GAAG;IAAEb,UAAU;IAAEC,cAAc;IAAEC,SAAS;IAAEI,aAAa;IAAEH;EAAc,CAAC;;EAErF;EACA;EACA;EACA;EACA;;EAEA,oBAAO,QAAC,WAAW,CAAC,QAAQ;IAAC,KAAK,EAAEU,KAAM;IAAA,UAAER;EAAQ;IAAA;IAAA;IAAA;EAAA,QAAwB;AAC7E,CAAC;AAAC,GAtCWD,YAAY;AAAA,KAAZA,YAAY;AAAA;AAAA"},"metadata":{},"sourceType":"module"}