{"ast":null,"code":"var _jsxFileName = \"/Users/shaneazania/Documents/GitHub/seviin_threads/src/contexts/cart.context.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, /*useState,*/useEffect, useReducer } from \"react\";\nimport \"../utils/firebase/firebase.utils\";\n\n// the actual value you want to access\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext({\n  isCartOpen: false,\n  set_isCartOpen: () => null,\n  cartItems: null,\n  addItemToCart: () => null,\n  subtractItemFromCart: () => null,\n  deleteFromCart: () => null,\n  cartCount: null,\n  cartTotal: null\n});\n\n// Reducer and action types and iniitial state\nexport const CART_ACTION_TYPES = {\n  SET_IS_CART_OPEN: \"SET_IS_CART_OPEN\",\n  SET_CART_ITEMS: \"SET_CART_ITEMS\",\n  SET_CART_COUNT: \"SET_CART_COUNT\",\n  SET_CART_TOTAL: \"SET_CART_TOTAL\",\n  SET_CART_COUNT_AND_TOTAL: \"SET_CART_COUNT_AND_TOTAL\"\n};\nconst cartReducer = (state, action) => {\n  const {\n    type,\n    payload\n  } = action;\n  switch (type) {\n    case CART_ACTION_TYPES.SET_IS_CART_OPEN:\n      return {\n        ...state,\n        isCartOpen: payload\n      };\n    case CART_ACTION_TYPES.SET_CART_ITEMS:\n      return {\n        ...state,\n        cartItems: payload.updatedCartItemsArray,\n        cartTotal: payload.totalAccumulator,\n        cartCount: payload.countAccumulator\n      };\n    // case CART_ACTION_TYPES.SET_CART_COUNT_AND_TOTAL:\n    // \treturn {\n    // \t\t...state,\n    // \t\tcartTotal: payload.cartTotal,\n    // \t\tcartCount: payload.cartCount,\n    // \t};\n\n    default:\n      throw new Error(`wrong action type: ${type}`);\n  }\n};\nconst INITIAL_STATE = {\n  isCartOpen: false,\n  cartItems: [],\n  cartCount: 0,\n  cartTotal: 0\n};\n\n// provider is the actual component that gets wrapped around other components to give them acces to the context\nexport const CartProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [{\n    isCartOpen,\n    cartItems,\n    cartCount,\n    cartTotal\n  }, dispatch] = useReducer(cartReducer, INITIAL_STATE);\n  const updateCartCountAndTotal = theCartItems => {\n    var countAccumulator = 0,\n      totalAccumulator = 0;\n    theCartItems.map(_ref2 => {\n      let {\n        quantity,\n        price\n      } = _ref2;\n      countAccumulator += quantity;\n      totalAccumulator += price * quantity;\n      return 0;\n    });\n    return {\n      totalAccumulator,\n      countAccumulator\n    };\n  };\n  const set_isCartOpen = () => {\n      dispatch({\n        type: CART_ACTION_TYPES.SET_IS_CART_OPEN,\n        payload: !isCartOpen\n      });\n    },\n    addItemToCart = itemToAdd => {\n      // If item is already in 'cartItems', increase the quantity value, else add 'itemToAdd'.\n      var updatedCartItemsArray = [];\n      // check if itemToAdd has a valid id in the cartItems[] already\n      const itemToAddPresent = cartItems.find(item => item.id === itemToAdd.id);\n\n      // if item is already present, increase it's quantity by 1\n      if (itemToAddPresent) {\n        updatedCartItemsArray = cartItems.map(item => item.id === itemToAdd.id ?\n        //if itemToAdd matches current item in cart, increase the existing item quantity by 1\n        {\n          ...item,\n          quantity: item.quantity + 1\n        } :\n        //if current item does not match, just add current item to the new cart array\n        item);\n      } // if item is NOT already present, add quantity value to item, then add item to updatedCartItemsArray\n      else {\n        updatedCartItemsArray = [...cartItems, {\n          ...itemToAdd,\n          quantity: 1\n        }];\n      }\n      const {\n        totalAccumulator,\n        countAccumulator\n      } = updateCartCountAndTotal(updatedCartItemsArray);\n      dispatch({\n        type: CART_ACTION_TYPES.SET_CART_ITEMS,\n        payload: {\n          updatedCartItemsArray,\n          totalAccumulator,\n          countAccumulator\n        }\n      });\n    },\n    subtractItemFromCart = itemToSubtract => {\n      var updatedCartItemsArray = [];\n\n      // check if item is in cartItems\n      const itemToSubtractPresent = cartItems.find(item => item.id === itemToSubtract.id);\n\n      // if item present, decrease quantity, else don't do anything\n      if (itemToSubtractPresent) {\n        updatedCartItemsArray = cartItems.map(item => {\n          if (item.id === itemToSubtractPresent.id) {\n            // check quantity\n            return {\n              ...item,\n              quantity: item.quantity - 1\n            };\n          } else {\n            return item;\n          }\n        });\n        // check if quantity reaches 0, don't add to updated cart array)\n        updatedCartItemsArray = updatedCartItemsArray.filter(item => item.quantity > 0);\n        const {\n          totalAccumulator,\n          countAccumulator\n        } = updateCartCountAndTotal(updatedCartItemsArray);\n        dispatch({\n          type: CART_ACTION_TYPES.SET_CART_ITEMS,\n          payload: {\n            updatedCartItemsArray,\n            totalAccumulator,\n            countAccumulator\n          }\n        });\n      }\n    };\n  const deleteFromCart = itemToDelete => {\n    const updatedCartItemsArray = cartItems.filter(item => item.id !== itemToDelete.id);\n    const {\n      totalAccumulator,\n      countAccumulator\n    } = updateCartCountAndTotal(updatedCartItemsArray);\n    dispatch({\n      type: CART_ACTION_TYPES.SET_CART_ITEMS,\n      payload: {\n        updatedCartItemsArray,\n        totalAccumulator,\n        countAccumulator\n      }\n    });\n  };\n  const value = {\n    isCartOpen,\n    set_isCartOpen,\n    cartItems,\n    addItemToCart,\n    subtractItemFromCart,\n    deleteFromCart,\n    cartCount,\n    cartTotal\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 9\n  }, this);\n};\n_s(CartProvider, \"Vc7C2iKrRGZvYB8u0M26CgJiNDg=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["createContext","useEffect","useReducer","CartContext","isCartOpen","set_isCartOpen","cartItems","addItemToCart","subtractItemFromCart","deleteFromCart","cartCount","cartTotal","CART_ACTION_TYPES","SET_IS_CART_OPEN","SET_CART_ITEMS","SET_CART_COUNT","SET_CART_TOTAL","SET_CART_COUNT_AND_TOTAL","cartReducer","state","action","type","payload","updatedCartItemsArray","totalAccumulator","countAccumulator","Error","INITIAL_STATE","CartProvider","children","dispatch","updateCartCountAndTotal","theCartItems","map","quantity","price","itemToAdd","itemToAddPresent","find","item","id","itemToSubtract","itemToSubtractPresent","filter","itemToDelete","value"],"sources":["/Users/shaneazania/Documents/GitHub/seviin_threads/src/contexts/cart.context.jsx"],"sourcesContent":["import { createContext, /*useState,*/ useEffect, useReducer } from \"react\";\nimport {} from \"../utils/firebase/firebase.utils\";\n\n// the actual value you want to access\nexport const CartContext = createContext({\n\tisCartOpen: false,\n\tset_isCartOpen: () => null,\n\tcartItems: null,\n\taddItemToCart: () => null,\n\tsubtractItemFromCart: () => null,\n\tdeleteFromCart: () => null,\n\tcartCount: null,\n\tcartTotal: null,\n});\n\n// Reducer and action types and iniitial state\nexport const CART_ACTION_TYPES = {\n\tSET_IS_CART_OPEN: \"SET_IS_CART_OPEN\",\n\tSET_CART_ITEMS: \"SET_CART_ITEMS\",\n\tSET_CART_COUNT: \"SET_CART_COUNT\",\n\tSET_CART_TOTAL: \"SET_CART_TOTAL\",\n\tSET_CART_COUNT_AND_TOTAL: \"SET_CART_COUNT_AND_TOTAL\",\n};\nconst cartReducer = (state, action) => {\n\tconst { type, payload } = action;\n\n\tswitch (type) {\n\t\tcase CART_ACTION_TYPES.SET_IS_CART_OPEN:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisCartOpen: payload,\n\t\t\t};\n\t\tcase CART_ACTION_TYPES.SET_CART_ITEMS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcartItems: payload.updatedCartItemsArray,\n\t\t\t\tcartTotal: payload.totalAccumulator,\n\t\t\t\tcartCount: payload.countAccumulator,\n\t\t\t};\n\t\t// case CART_ACTION_TYPES.SET_CART_COUNT_AND_TOTAL:\n\t\t// \treturn {\n\t\t// \t\t...state,\n\t\t// \t\tcartTotal: payload.cartTotal,\n\t\t// \t\tcartCount: payload.cartCount,\n\t\t// \t};\n\n\t\tdefault:\n\t\t\tthrow new Error(`wrong action type: ${type}`);\n\t}\n};\nconst INITIAL_STATE = {\n\tisCartOpen: false,\n\tcartItems: [],\n\tcartCount: 0,\n\tcartTotal: 0,\n};\n\n// provider is the actual component that gets wrapped around other components to give them acces to the context\nexport const CartProvider = ({ children }) => {\n\tconst [{ isCartOpen, cartItems, cartCount, cartTotal }, dispatch] = useReducer(cartReducer, INITIAL_STATE);\n\n\tconst updateCartCountAndTotal = (theCartItems) => {\n\t\tvar countAccumulator = 0,\n\t\t\ttotalAccumulator = 0;\n\t\ttheCartItems.map(({ quantity, price }) => {\n\t\t\tcountAccumulator += quantity;\n\t\t\ttotalAccumulator += price * quantity;\n\t\t\treturn 0;\n\t\t});\n\n\t\treturn { totalAccumulator, countAccumulator };\n\t};\n\n\tconst set_isCartOpen = () => {\n\t\t\tdispatch({ type: CART_ACTION_TYPES.SET_IS_CART_OPEN, payload: !isCartOpen });\n\t\t},\n\t\taddItemToCart = (itemToAdd) => {\n\t\t\t// If item is already in 'cartItems', increase the quantity value, else add 'itemToAdd'.\n\t\t\tvar updatedCartItemsArray = [];\n\t\t\t// check if itemToAdd has a valid id in the cartItems[] already\n\t\t\tconst itemToAddPresent = cartItems.find((item) => item.id === itemToAdd.id);\n\n\t\t\t// if item is already present, increase it's quantity by 1\n\t\t\tif (itemToAddPresent) {\n\t\t\t\tupdatedCartItemsArray = cartItems.map((item) =>\n\t\t\t\t\titem.id === itemToAdd.id\n\t\t\t\t\t\t? //if itemToAdd matches current item in cart, increase the existing item quantity by 1\n\t\t\t\t\t\t  { ...item, quantity: item.quantity + 1 }\n\t\t\t\t\t\t: //if current item does not match, just add current item to the new cart array\n\t\t\t\t\t\t  item\n\t\t\t\t);\n\t\t\t} // if item is NOT already present, add quantity value to item, then add item to updatedCartItemsArray\n\t\t\telse {\n\t\t\t\tupdatedCartItemsArray = [...cartItems, { ...itemToAdd, quantity: 1 }];\n\t\t\t}\n\t\t\tconst { totalAccumulator, countAccumulator } = updateCartCountAndTotal(updatedCartItemsArray);\n\t\t\tdispatch({\n\t\t\t\ttype: CART_ACTION_TYPES.SET_CART_ITEMS,\n\t\t\t\tpayload: { updatedCartItemsArray, totalAccumulator, countAccumulator },\n\t\t\t});\n\t\t},subtractItemFromCart = (itemToSubtract) => {\n\t\tvar updatedCartItemsArray = [];\n\n\t\t// check if item is in cartItems\n\t\tconst itemToSubtractPresent = cartItems.find((item) => item.id === itemToSubtract.id);\n\n\t\t// if item present, decrease quantity, else don't do anything\n\t\tif (itemToSubtractPresent) {\n\t\t\tupdatedCartItemsArray = cartItems.map((item) => {\n\t\t\t\tif (item.id === itemToSubtractPresent.id) {\n\t\t\t\t\t// check quantity\n\t\t\t\t\treturn { ...item, quantity: item.quantity - 1 };\n\t\t\t\t} else {\n\t\t\t\t\treturn item;\n\t\t\t\t}\n\t\t\t});\n\t\t\t// check if quantity reaches 0, don't add to updated cart array)\n\t\t\tupdatedCartItemsArray = updatedCartItemsArray.filter((item) => item.quantity > 0);\n\n\t\t\tconst { totalAccumulator, countAccumulator } = updateCartCountAndTotal(updatedCartItemsArray);\n\t\t\tdispatch({\n\t\t\t\ttype: CART_ACTION_TYPES.SET_CART_ITEMS,\n\t\t\t\tpayload: { updatedCartItemsArray, totalAccumulator, countAccumulator },\n\t\t\t});\n\t\t}\n\t};\n\tconst deleteFromCart = (itemToDelete) => {\n\t\tconst updatedCartItemsArray = cartItems.filter((item) => item.id !== itemToDelete.id);\n\n\t\tconst { totalAccumulator, countAccumulator } = updateCartCountAndTotal(updatedCartItemsArray);\n\t\tdispatch({\n\t\t\ttype: CART_ACTION_TYPES.SET_CART_ITEMS,\n\t\t\tpayload: { updatedCartItemsArray, totalAccumulator, countAccumulator },\n\t\t});\n\t};\n\n\tconst value = {\n\t\tisCartOpen,\n\t\tset_isCartOpen,\n\t\tcartItems,\n\t\taddItemToCart,\n\t\tsubtractItemFromCart,\n\t\tdeleteFromCart,\n\t\tcartCount,\n\t\tcartTotal,\n\t};\n\n\treturn <CartContext.Provider value={value}>{children}</CartContext.Provider>;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}