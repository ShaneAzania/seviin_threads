{"ast":null,"code":"var _jsxFileName = \"/Users/shaneazania/Documents/GitHub/seviin_threads/src/contexts/user.context.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, /*useState,*/useEffect, useReducer } from \"react\";\nimport { onAuthStateChangedListener, getUserDisplayNameFromeFireStore } from \"../utils/firebase/firebase.utils\";\n\n// the actual value you want to access\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext({\n  currenntUser: null,\n  setCurrenntUser: () => null\n});\n\n// Reducer and action types\nconst USER_ACTION_TYPES = {\n  SET_CURRENT_USER: \"SET_CURRENT_USER\"\n};\nconst userReducer = (state, action) => {\n  const {\n    type,\n    payload\n  } = action;\n  switch (type) {\n    case USER_ACTION_TYPES.SET_CURRENT_USER:\n      return {\n        ...state,\n        currenntUser: payload\n      };\n    default:\n      throw new Error(`wrong action type: ${type}`);\n  }\n};\nconst INITIAL_STATE = {};\n\n// provider is the actual component that gets wrapped around other components to give them acces to the context\nexport const UserProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  // const [currenntUser, setCurrenntUser] = useState(null);\n  const [{\n    currenntUser\n  }, dispatch] = useReducer(userReducer, {\n    currenntUser: null\n  });\n  const setCurrenntUser = userToSet => {\n    dispatch({\n      type: USER_ACTION_TYPES.SET_CURRENT_USER,\n      payload: userToSet\n    });\n  };\n  const value = {\n    currenntUser,\n    setCurrenntUser\n  };\n  useEffect(() => {\n    const unsubscribe = onAuthStateChangedListener(async user => {\n      //try to get display name into current user before setCurrentUser\n      var userAuthWithDisplayName = null;\n      try {\n        userAuthWithDisplayName = await getUserDisplayNameFromeFireStore(user);\n        // console.log(\n        // \t\"userContext: onAuthStateChangedListener: try: userAuthWithDisplayName:\",\n        // \tuserAuthWithDisplayName\n        // );\n      } catch (error) {\n        // console.log(\"userContext: onAuthStateChangedListener: catch: user:\", user);\n        // console.log(\"userContext:\", error);\n      }\n\n      //set current user\n      if (user && userAuthWithDisplayName) {\n        // console.log(\n        // \t\"userContext: onAuthStateChangedListener: if/else: userAuthWithDisplayName:\",\n        // \tuserAuthWithDisplayName\n        // );\n        setCurrenntUser(userAuthWithDisplayName);\n      } else if (user && !userAuthWithDisplayName) {\n        // console.log(\"userContext: onAuthStateChangedListener: if/else: user:\", user);\n        setCurrenntUser(user);\n      } else {\n        setCurrenntUser(null);\n      }\n    });\n    return unsubscribe;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n_s(UserProvider, \"wcJ2vnnkEKnu3vlBs6A3sMhrIo8=\");\n_c = UserProvider;\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["createContext","useEffect","useReducer","onAuthStateChangedListener","getUserDisplayNameFromeFireStore","UserContext","currenntUser","setCurrenntUser","USER_ACTION_TYPES","SET_CURRENT_USER","userReducer","state","action","type","payload","Error","INITIAL_STATE","UserProvider","children","dispatch","userToSet","value","unsubscribe","user","userAuthWithDisplayName","error"],"sources":["/Users/shaneazania/Documents/GitHub/seviin_threads/src/contexts/user.context.jsx"],"sourcesContent":["import { createContext, /*useState,*/ useEffect, useReducer } from \"react\";\nimport { onAuthStateChangedListener, getUserDisplayNameFromeFireStore } from \"../utils/firebase/firebase.utils\";\n\n// the actual value you want to access\nexport const UserContext = createContext({\n\tcurrenntUser: null,\n\tsetCurrenntUser: () => null,\n});\n\n// Reducer and action types\nconst USER_ACTION_TYPES = {\n\tSET_CURRENT_USER: \"SET_CURRENT_USER\",\n};\nconst userReducer = (state, action) => {\n\tconst { type, payload } = action;\n\n\tswitch (type) {\n\t\tcase USER_ACTION_TYPES.SET_CURRENT_USER:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcurrenntUser: payload,\n\t\t\t};\n\t\tdefault:\n\t\t\tthrow new Error(`wrong action type: ${type}`);\n\t}\n};\n\nconst INITIAL_STATE = {};\n\n// provider is the actual component that gets wrapped around other components to give them acces to the context\nexport const UserProvider = ({ children }) => {\n\t// const [currenntUser, setCurrenntUser] = useState(null);\n\tconst [{ currenntUser }, dispatch] = useReducer(userReducer, { currenntUser: null });\n\n\tconst setCurrenntUser = (userToSet) => {\n\t\tdispatch({ type: USER_ACTION_TYPES.SET_CURRENT_USER, payload: userToSet });\n\t};\n\n\tconst value = { currenntUser, setCurrenntUser };\n\n\tuseEffect(() => {\n\t\tconst unsubscribe = onAuthStateChangedListener(async (user) => {\n\t\t\t//try to get display name into current user before setCurrentUser\n\t\t\tvar userAuthWithDisplayName = null;\n\n\t\t\ttry {\n\t\t\t\tuserAuthWithDisplayName = await getUserDisplayNameFromeFireStore(user);\n\t\t\t\t// console.log(\n\t\t\t\t// \t\"userContext: onAuthStateChangedListener: try: userAuthWithDisplayName:\",\n\t\t\t\t// \tuserAuthWithDisplayName\n\t\t\t\t// );\n\t\t\t} catch (error) {\n\t\t\t\t// console.log(\"userContext: onAuthStateChangedListener: catch: user:\", user);\n\t\t\t\t// console.log(\"userContext:\", error);\n\t\t\t}\n\n\t\t\t//set current user\n\t\t\tif (user && userAuthWithDisplayName) {\n\t\t\t\t// console.log(\n\t\t\t\t// \t\"userContext: onAuthStateChangedListener: if/else: userAuthWithDisplayName:\",\n\t\t\t\t// \tuserAuthWithDisplayName\n\t\t\t\t// );\n\t\t\t\tsetCurrenntUser(userAuthWithDisplayName);\n\t\t\t} else if (user && !userAuthWithDisplayName) {\n\t\t\t\t// console.log(\"userContext: onAuthStateChangedListener: if/else: user:\", user);\n\t\t\t\tsetCurrenntUser(user);\n\t\t\t} else {\n\t\t\t\tsetCurrenntUser(null);\n\t\t\t}\n\t\t});\n\n\t\treturn unsubscribe;\n\t}, []);\n\n\treturn <UserContext.Provider value={value}>{children}</UserContext.Provider>;\n};\n"],"mappings":";;AAAA,SAASA,aAAa,EAAE,aAAcC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC1E,SAASC,0BAA0B,EAAEC,gCAAgC,QAAQ,kCAAkC;;AAE/G;AAAA;AACA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAC;EACxCM,YAAY,EAAE,IAAI;EAClBC,eAAe,EAAE,MAAM;AACxB,CAAC,CAAC;;AAEF;AACA,MAAMC,iBAAiB,GAAG;EACzBC,gBAAgB,EAAE;AACnB,CAAC;AACD,MAAMC,WAAW,GAAG,CAACC,KAAK,EAAEC,MAAM,KAAK;EACtC,MAAM;IAAEC,IAAI;IAAEC;EAAQ,CAAC,GAAGF,MAAM;EAEhC,QAAQC,IAAI;IACX,KAAKL,iBAAiB,CAACC,gBAAgB;MACtC,OAAO;QACN,GAAGE,KAAK;QACRL,YAAY,EAAEQ;MACf,CAAC;IACF;MACC,MAAM,IAAIC,KAAK,CAAE,sBAAqBF,IAAK,EAAC,CAAC;EAAC;AAEjD,CAAC;AAED,MAAMG,aAAa,GAAG,CAAC,CAAC;;AAExB;AACA,OAAO,MAAMC,YAAY,GAAG,QAAkB;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EACxC;EACA,MAAM,CAAC;IAAEZ;EAAa,CAAC,EAAEa,QAAQ,CAAC,GAAGjB,UAAU,CAACQ,WAAW,EAAE;IAAEJ,YAAY,EAAE;EAAK,CAAC,CAAC;EAEpF,MAAMC,eAAe,GAAIa,SAAS,IAAK;IACtCD,QAAQ,CAAC;MAAEN,IAAI,EAAEL,iBAAiB,CAACC,gBAAgB;MAAEK,OAAO,EAAEM;IAAU,CAAC,CAAC;EAC3E,CAAC;EAED,MAAMC,KAAK,GAAG;IAAEf,YAAY;IAAEC;EAAgB,CAAC;EAE/CN,SAAS,CAAC,MAAM;IACf,MAAMqB,WAAW,GAAGnB,0BAA0B,CAAC,MAAOoB,IAAI,IAAK;MAC9D;MACA,IAAIC,uBAAuB,GAAG,IAAI;MAElC,IAAI;QACHA,uBAAuB,GAAG,MAAMpB,gCAAgC,CAACmB,IAAI,CAAC;QACtE;QACA;QACA;QACA;MACD,CAAC,CAAC,OAAOE,KAAK,EAAE;QACf;QACA;MACD;;MAEA;MACA,IAAIF,IAAI,IAAIC,uBAAuB,EAAE;QACpC;QACA;QACA;QACA;QACAjB,eAAe,CAACiB,uBAAuB,CAAC;MACzC,CAAC,MAAM,IAAID,IAAI,IAAI,CAACC,uBAAuB,EAAE;QAC5C;QACAjB,eAAe,CAACgB,IAAI,CAAC;MACtB,CAAC,MAAM;QACNhB,eAAe,CAAC,IAAI,CAAC;MACtB;IACD,CAAC,CAAC;IAEF,OAAOe,WAAW;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAO,QAAC,WAAW,CAAC,QAAQ;IAAC,KAAK,EAAED,KAAM;IAAA,UAAEH;EAAQ;IAAA;IAAA;IAAA;EAAA,QAAwB;AAC7E,CAAC;AAAC,GA7CWD,YAAY;AAAA,KAAZA,YAAY;AAAA;AAAA"},"metadata":{},"sourceType":"module"}